// SPDX-License-Identifier: ISC
pragma solidity >=0.8.0;

import "forge-std/Test.sol";
import { NumberFormat } from "../src/NumberFormat.sol";

contract NumberFormatTest is Test {
    function testToScientific() public {
        uint256 _value = 123456789;
        string memory _expected = "1.23456789e8";
        string memory _actual = NumberFormat.toScientific(_value);
        assertEq(_expected, _actual);
    }

    function testToScientific2() public {
        uint256 _value = 1e18;
        string memory _expected = "1e18";
        string memory _actual = NumberFormat.toScientific(_value);
        assertEq(_expected, _actual);
    }

    function testToScientific3() public {
        uint256 _value = 1010;
        string memory _expected = "1.01e3";
        string memory _actual = NumberFormat.toScientific(_value);
        assertEq(_expected, _actual);
    }

    function testToBinary() public {
        uint256 _value = 33333123453333155511555551111111133333384417858461245989617141166124389194404;
        string
            memory _expected = "0100100110110001111000010001100101011000111001100101100010011101100010110101011100001010101111111100111001000011101100110010111111000001110001101110101010011111000110001011110100111011011000101000010110101011110111100100000001110111101011010101101010100100";
        string memory _actual = NumberFormat.toBinary(_value);
        assertEq(_expected, _actual);
    }
    function testToBinary2() public {
        uint256 _value = 340509184897279166371350767850073851274;
        string
            memory _expected = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000001010111010111011111101010110001001111110001010011011111110011100101100100100110000110110011110111100111000010110001010";
        string memory _actual = NumberFormat.toBinary(_value);
        assertEq(_expected, _actual);
    }
    function testToBinary3() public {
        uint256 _value = 10402026004573426959157775277;
        string
            memory _expected = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000011001110001011010101011111001111011010110100010010011011100011001000010110100101110101101";
        string memory _actual = NumberFormat.toBinary(_value);
        assertEq(_expected, _actual);
    }
    function testToBinary4() public {
        uint256 _value = 147304017184634670013876544468137608253;
        string
            memory _expected = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001101110110100011011100011000101011011000110001111010010010010110100101000111000000111100110111010010110000000010000010000111101";
        string memory _actual = NumberFormat.toBinary(_value);
        assertEq(_expected, _actual);
    }
    function testToBinary5() public {
        uint256 _value = type(uint256).max;
        string
            memory _expected = "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
        string memory _actual = NumberFormat.toBinary(_value);
        assertEq(_expected, _actual);
    }
    function testToBinary6() public {
        uint256 _value = 0;
        string
            memory _expected = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        string memory _actual = NumberFormat.toBinary(_value);
        assertEq(_expected, _actual);
    }
    function testToBinary7() public {
        uint256 _value = 12;
        string
            memory _expected = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100";
        string memory _actual = NumberFormat.toBinary(_value);
        assertEq(_expected, _actual);
    }
}
